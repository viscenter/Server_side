/**
*  An SQL implementation of CHS Image Extensions.
*/

import groovy.sql.Sql
import edu.harvard.chs.cite.CiteUrn


def debug = false

def confDir = context.getRealPath("/configs")
String confFile = "citeconfig.xml"

String userConfig = request.getParameter("config")
try {
    File f = new File("${confDir}/${userConfig}")
    System.err.println "userConfig is ${userConfig} and f is ${f}"
    if (f.exists()) {confFile = userConfig }
} catch (Exception e) {
    System.err.println "Caught exception: sticking with ${confFile}"
    // just stick with default
}

/*
* Parse configuration file
*/
def confXml = new XmlSlurper().parse(new File(confDir + "/${confFile}"))

/** Installed URL for API */
def apiUrl = confXml."@url".toString()

// Backend sql database settings:
/** String*/
def dbUrl = confXml.jdbcConfig."@dburl".toString()
/** */
def dbUser = confXml.jdbcConfig."@user".toString()
/** */
def dbPass = confXml.jdbcConfig."@password".toString()
/** */
def dbDriver = confXml.jdbcConfig."@driver".toString()
def zoomable = confXml.iipimage."@includeZoomable".toString()

// Settings for IIP image extension:
/** */
def urlBase = confXml.iipimage."@url".toString()
/** */
def defaultNS = confXml.defaults."@ns".toString()
/** */
def defaultCollection = confXml.defaults."@collection".toString()
/** */
def defaultWidth = 800

try {
    def widthStr = confXml.defaults."@width".text()
    defaultWidth = Integer.parseInt(widthStr)
} catch (NumberFormatException nfe) {
    // just use hard-coded default and continue
}

/* Two parameters are required for all requests:
 the request name and the urn for the image */
String reqName = request.getParameter("request")
String urnStr = request.getParameter("urn")

/** The requested URN as a CiteUrn object */
CiteUrn urn
boolean keepOn = false
try {
    urn = new CiteUrn(urnStr)
    keepOn = true
} catch (Exception e) {
    errorReply("${urnStr} is not a valid CiteUrn", -1)

}



/**
* Closure adds the spec's syntax for error messages
* to a message and code combination.
*/
def errorReply = {msg,code ->
    println '<chsimg:CHSImgError  xmlns:chsimg="http://chs.harvard.edu/xmlns/img"'
    println 'xmlns="http://chs.harvard.edu/xmlns/img"> '
    println "<message>${msg}</message>"
    println "<code>${code}</code>"
    println "</chsimg:CHSImgError> "
}

/** Closure sets content type and generates XML PI
* to associate an XSLT stylesheet.
*/
def openXml = { xslt ->
    response.setContentType("text/xml")
    if ((xslt) &&  (xslt != "default.xsl")) {
        println  """<?xml-stylesheet type="text/xsl" href="xsl/${xslt}"?>"""
    }
}



if (keepOn) {

    /** Query database on URN with no extended RoI. */
    String queryUrnStr = "urn:cite:${urn.getNs()}:${urn.getCollection()}.${urn.getObjectId()}".toString()

    String imgId = urn.getObjectId()
    String subRef = urn.getExtendedRef()

    def w 
    w = request.getParameter("w")
    if (!w) {
        w = defaultWidth
    }

    def withXslt = request.getParameter("xslt")
    if (!withXslt) {
        withXslt = "default.xsl"	
    }
    if (withXslt == 'none') {
        withXslt = null
    }

    System.err.println "USE STYLESHEET ${withXslt} for request ${reqName}"

    if ((!reqName) || (!imgId)) {
        response.setContentType("text/xml")
        errorReply( "INVALID REQUEST. Must have 'request' parameter and 'urn' parameter.", "1")

    } else{
        if (debug) {System.err.println "WORK WITH ID ${imgId} and SUBREF #${subRef}#"}


        Sql sql = Sql.newInstance(dbUrl,dbUser,dbPass,dbDriver)
        def imgRecord = sql.firstRow("select * from img where img_id = ?", [queryUrnStr])
    
        if (!imgRecord) {
            if (debug) {System.err.println "FAILED FOR URn " + queryUrnStr}
            errorReply("NO RECORD FOR IMG ${imgId}","-1")
        } else {    

            switch (reqName) {
                case "GetImagePlus":
                    openXml(withXslt)
                println """
<GetImagePlus xmlns='http://chs.harvard.edu/xmlns/img'>
<request>
<urn>${urn}</urn>
</request>
<reply>
<caption>${imgRecord.getProperty("caption")}</caption>
<rights> ${imgRecord.getProperty("rights")}</rights>
<binaryUrl>${apiUrl}request=GetBinaryImage&amp;urn=${urn}</binaryUrl>
"""

if (zoomable == 'true') {
    println "<zoomableUrl>${apiUrl}request=GetIIPMooViewer&amp;urn=${urn}&amp;xslt=zoomomatic.xsl</zoomableUrl>"
} else {
    println "<zoomableUrl>${apiUrl}request=GetIIPMooViewer&amp;urn=${urn}&amp;xslt=none</zoomableUrl>"
}
println "</reply>\n</GetImagePlus>"
                break



                case "GetCaption":
                    openXml(withXslt)
                println """
<GetCaption xmlns='http://chs.harvard.edu/xmlns/img'>
<request>
<urn>${urn}</urn>
</request>
<reply>
<caption>
${imgRecord.getProperty("caption")}
</caption>
</reply>
</GetCaption>"""
        break
        
        case "GetRights":
            openXml(withXslt)
        // This might normally make a call to the Collection
        // to retrieve or construct an appropriate caption, but
        // for this data set, we just repeat a standard statement.
        println """
<GetRights xmlns='http://chs.harvard.edu/xmlns/img'>
<request>
<urn>${urn}</urn>
</request>
<reply>
<rights>
 ${imgRecord.getProperty("rights")}
</rights>
</reply>
</GetRights>
"""
        break

	    
        case "GetBinaryImage":
                def groupRecord = sql.firstRow("select * from img_group g, img i where g.id = i.group_id and i.img_id = ?", [queryUrnStr])
                def imgDir = groupRecord.getProperty('img_dir')
                if (subRef == "") {
                    if (debug) {System.err.println "NO SUBREF"}
                    def solution = "${urlBase}?OBJ=IIP,1.0&FIF=${imgDir}/${imgId}.tif&WID=${w}&CVT=JPEG"
                    response.sendRedirect(solution.toString())

                } else {
                    if (debug) {System.err.println "USIE SUBREF ${subRef}"}
                    def solution = "${urlBase}?OBJ=IIP,1.0&FIF=${imgDir}/${imgId}.tif&RGN=${subRef}&WID=${w}&CVT=JPEG"
                    response.sendRedirect(solution.toString())
                }

                
                case "GetIIPMooViewer":
                    def groupRecord = sql.firstRow("select * from img_group g, img i where g.id = i.group_id and i.img_id = ?", [queryUrnStr])
                    def imgDir = groupRecord.getProperty('img_dir')


                    if ((withXslt) && (zoomable == "true")) {
                        openXml("zoomomatic.xsl")
                    } else {
                        openXml(null)
                    }
                    println """
<GetIIPMooViewer  xmlns='http://chs.harvard.edu/xmlns/img'>
<request>
<urn>${urn}</urn>
<id>${imgId}</id>
<roi>${subRef}</roi>
</request>
<reply>
<serverUrl val="${urlBase}"/>
<imgPath val="${imgDir}/${imgId}.tif"/>
<roi val="${subRef}"/>
<label>${imgRecord.getProperty('img_id')} : ${imgRecord.getProperty('rights')}</label>
</reply>
</GetIIPMooViewer>
"""

            break


        default:
	    def msg = ""
	    if (reqName) {
                response.setContentType("text/xml")
		errorReply( "INVALID REQUEST. Request name not recognized: ${reqName}", "1")
	    }

	    break
	} //switch
	sql.close()
}
}

}
